#!/usr/bin/env ruby

$VERBOSE = true

# Rip a CD into a collection of Ogg Vorbis files.
# Input is an album description text file.  Example:
#   Genre=Classical
#   Artist=Prokofiev
#   Album=Violin Sonata No. 1 in F minor / Gidon Kremer & Martha Argerich
#   Date=1992
#   track_01.flac=1. Andante assai
#   track_02.flac=2. Allegro brusco
#   track_03.flac=3. Andante
#   track_04.flac=4. Allegrissimo - Andante assai, come prima

require 'fileutils'
require 'shellwords'
require 'optparse'

# Option values
$dryrun = false
$debug = false
$eject = false
$start_track = 1
$end_track = 100
$quality = 6
$overwrite = false

$tags = {}

def usage
   puts "usage: ripalbum [options] album.txt"
   puts "-v        Enable debug messages"
   puts "-n        Dry run, don't run commands"
   puts "-o        Overwrite existing files"
   puts "-e        Eject CD after ripping"
   puts "-s n      Starting track number"
   puts "-e n      Ending track number"
   puts "-q n      Ogg Vorbis quality level (default 6)"
   exit 1
end

opts = OptionParser.new
opts.banner = "usage: oggripalbum albumfile"
opts.on("-v", "--[no-]verbose", "Run verbosely") {|val| $debug = val }
opts.on("-n", "--[no-]dryrun", "Print but don't run commands") {|val| $dryrun = val }
opts.on("-e", "--[no-]eject", "Eject CD after ripping") {|val| $eject = val }
opts.on("-s", "--start=ARG", Integer, "Starting track number") {|val| $start_track = val }
opts.on("-e", "--end=ARG", Integer, "Ending track number") {|val| $end_track = val }
opts.on("-q", "--quality=ARG", Integer, "Ogg Vorbis quality level") {|val| $quality = val }
opts.on("-o", "--[no-]overwrite", "Overwrite existing files") {|val| $overwrite = val }
rest = opts.parse(ARGV)

usage if rest.length != 1

# Put out a string if debugging is enabled.

def dputs(string)
   puts(string) if $debug
end

# Escape quote characters in filename, and surround the result in
# quotes, so that it can be embedded in a shell command.

def escape(str)
  Shellwords.escape(str)
end

# check_status --
#
#	Check the most recent child program status, and if it
#	was aborted with control-C, exit.

def check_status
  if $?.signaled?
    signum = $?.termsig
    if Signal.list['INT'] == signum
      puts "\nChild process aborted by Control-C.  Exiting."
      exit 1
    end
  end
end

# riptrack --
#
#	Rip a CD track into a file.
#	  filename - output filename
#	  title - title for track
#	  track - CD track number
#	All tags in $tags hash will applied to the output file

def riptrack(filename, title, track)
  # Rip each track and pipe the data to the Ogg encoder.
  # Set the tags for each file, and also set the track number and title.
  if File.exist?(filename) && !$overwrite
     # Don't rip the track if the FLAC file already exists.
     puts "File #{filename} already exists.  Skipping."
     return
  end
  # Construct the pipe command that will rip the track and encode it.
  tracktag = sprintf("%02d", track)
  cmd = "cdparanoia -q #{track}-#{track} - |" +
	"oggenc - -q #{$quality} -o " + escape(filename)
  $tags.each {|t,v| cmd += " -c " + escape("#{t}=#{v}")}
  cmd += " -c " + escape("TITLE=#{title}")
  cmd += " -c " + escape("TRACKNUMBER=#{track}")
  dputs "Running: #{cmd}"
  if $dryrun
    puts(cmd)
  else
    system(cmd)
    check_status
  end
end

# Read the album file.  Lines that are of the form "file.ogg=title"
# define the association between files and track titles. Other lines
# of the form "tag=value" are tags that will be applied to the files.

albumfile = rest[0]
track = 1
IO.foreach(albumfile) do |line|
  line.rstrip!
  case line
  when /^(.+\.ogg)=(.+)$/
    if track >= $start_track && track <= $end_track
      riptrack($1, $2, track)
    end
    track += 1
  when /^(\w+)=(.*)$/
    $tags[$1] = $2
  else
    # Assume it's a track title.  Construct a filename by prepending
    # the track number and appending a file extension.
    if track >= $start_track && track <= $end_track
      filename = title + ".ogg"
      title = sprintf("%02d - %s", track, line)
      riptrack(filename, title, track)
    end
    track += 1
  end
end


if $dryrun
   puts("eject /dev/cdrom") if $eject
else
   system("eject /dev/cdrom") if $eject
end
